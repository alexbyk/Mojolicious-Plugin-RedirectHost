=head1 NAME

Mojolicious::Plugin::RedirectHost::RuTutorial - Russian tutorial

=head1 VERSION

Version 0.03_2


=head1 SYNOPSIS


Сделать 301 редирект с C<http://mirror.main.host/path?query> на C<http://main.host/path?query>
  
  # Mojolicious
  $app->plugin('RedirectHost', host => 'main.host');
  
  # Mojolicious::Lite
  plugin RedirectHost => { host => 'main.host' };

Теперь любые запросы, приходящие на зеркало (тобишь если заголовок запроса "Host" не совпадает с параметром "host", переданном плагину), будут переадресовываться на основной "host", по умолчанию со статусом 301.
Например, для того, чтобы Яндекс-Шмандекс и Гугл-Шмугл не разбавляли показатели сайта по поддоменам

=head1 OPTIONS/USAGE

=head2 C<host>

Основной домен. Запросы, заголовок C<Host> в которых не совпадает с доменом, будут переадресованы на основной домен
Это обязательный параметр, без него плагин матерится как Джигурда и ничего не делает

=head2 C<code>

  $app->plugin('RedirectHost', host => 'main.host', code => 302);

Код ответа, по умолчанию 301 (Moved Permanently)

=head2 C<url>

Все ключи в хеше C<url> (кроме C<query>) становятся методами объекта L<Mojo::URL>, те, которые не затираются - берутся с текущего запроса
  
  # 302: http://mirror.main.host/path?query -> http://main.host/path?query
  $app->plugin('RedirectHost', host => 'main.host', code => 302);

Можно изменить параметры запроса, заменив значения текущего запроса или добавив новые. Например,
изменить протокол на C<https> и добавив C<?a=b> в конец запроса

  # http://mirror.main.host/foo -> https://main.host/foo?a=b
  $app->plugin(
    'RedirectHost',
    host   => 'main.host',    
    url => { scheme => 'https', query  => [{a => 'b'}] }
  );


Значение url->{query} можно использовать так (обрати внимание на []):

  # append ?a=old&foo=bar -> ?a=old&foo=bar&a=b
  url => {query => [{a => 'b'}]

  # merge ?a=old&foo=bar -> ?a=b&foo=bar
  url => {query => [[a => 'b']]
  
  # replace ?a=old&foo=bar -> ?a=b
  url => {query => [a => 'b']}
  
  # this works too
  url => {query => [Mojo::Parameters->new(a => 'b')]}
  
  # Wrong!!! Don't do this. Don't forget []
  url => {query => Mojo::Parameters->new(a => 'b')}

Подробнее смотри L<Mojo::URL/query>

Полность указать новый запрос можно строкой

  # http://mirror.main.host/foo -> http://google.com
  $app->plugin(
    'RedirectHost',
    host   => 'main.host',    
    url => 'http://google.com'
  );
  

Указать новый запрос объектом L<Mojo::URL>

  # http://mirror.main.host/foo -> http://google.com
  $app->plugin(
    'RedirectHost',
    host => 'main.host',    
    url  => Mojo::URL->new('http://google.com')
  );

=head1 CONFIG

Необходимые настройки можно указать в конфиге приложения по ключу C<redirect_host>

  $app->config(redirect_host => {host => 'main.host'});

=head1 METHODS

=head2 register

  Регистрирует плагин. См L<Mojolicious::Plugin/register>

=head1 TODO

Play around requests without "Host" header like this:
  
  GET / HTTP/1.1


=head1 AUTHOR

Alex, C<< <alexbyk at cpan.org> >>

=head1 BUGS

Please report any bugs or feature requests to C<bug-mojolicious-plugin-redirecthost at rt.cpan.org>, or through
the web interface at L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Mojolicious-Plugin-RedirectHost>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Mojolicious::Plugin::RedirectHost


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker (report bugs here)

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Mojolicious-Plugin-RedirectHost>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Mojolicious-Plugin-RedirectHost>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Mojolicious-Plugin-RedirectHost>

=item * Search CPAN

L<http://search.cpan.org/dist/Mojolicious-Plugin-RedirectHost/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 LICENSE AND COPYRIGHT

Copyright 2012 Alex.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.


=cut

